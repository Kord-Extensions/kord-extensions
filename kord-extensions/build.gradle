buildscript {
    repositories {
        maven {
            name = 'KotDis'
            url = 'https://maven.kotlindiscord.com/repository/maven-public/'
        }
    }
}

plugins {
    id 'maven-publish'

    id 'com.github.jakemarsden.git-hooks' version '0.0.1'
    id 'io.gitlab.arturbosch.detekt' version '1.13.1'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
}

group 'com.kotlindiscord.kord.extensions'
targetCompatibility = 1.8
version rootProject.version

repositories {
    maven {
        name = 'KotDis'
        url = 'https://maven.kotlindiscord.com/repository/maven-public/'
    }
}


dependencies {
    detektPlugins 'io.gitlab.arturbosch.detekt:detekt-formatting:1.13.1'

    api 'com.gitlab.kordlib.kord:kord-core:0.6.9'

    api 'net.time4j:time4j-base:5.7'
    api 'net.time4j:time4j-tzdata:5.0-2020a'

    api 'org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.0-RC'

    implementation 'io.github.microutils:kotlin-logging:2.0.3'
    implementation 'org.apache.commons:commons-text:1.8'

    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation 'ch.qos.logback:logback-classic:1.2.3'
    testImplementation 'io.github.microutils:kotlin-logging:2.0.3'
    testImplementation 'org.codehaus.groovy:groovy:3.0.4'  // For logback config
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

detekt {
    buildUponDefaultConfig = true
    config = files("detekt.yml")
}

gitHooks {
    hooks = ['pre-commit': 'kord-extensions:detekt']
}

task sourceJar(type: Jar) {
    classifier 'sources'

    from sourceSets.main.kotlin
}

publishing {
    repositories {
        maven {
            name = "KotDis"
            url = uri("https://maven.kotlindiscord.com/repository/maven-snapshots/")

            credentials {
                username = project.findProperty("kotdis.user") ?: System.getenv("KOTLIN_DISCORD_USER")
                password = project.findProperty("kotdis.password") ?: System.getenv("KOTLIN_DISCORD_PASSWORD")
            }

            version = project.version
        }
    }

    publications {
        maven(MavenPublication) {
            from components.java

            artifact tasks.sourceJar
        }
    }
}

test {
    useJUnitPlatform()

    testLogging.showStandardStreams = true

    testLogging {
        events "PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"
    }

    systemProperty "org.slf4j.simpleLogger.defaultLogLevel", "debug"
}
